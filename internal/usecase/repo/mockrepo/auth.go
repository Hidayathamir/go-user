// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source=auth.go -destination=mockrepo/auth.go -package=mockrepo
//

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"

	entity "github.com/Hidayathamir/go-user/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuth is a mock of IAuth interface.
type MockIAuth struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthMockRecorder
}

// MockIAuthMockRecorder is the mock recorder for MockIAuth.
type MockIAuthMockRecorder struct {
	mock *MockIAuth
}

// NewMockIAuth creates a new mock instance.
func NewMockIAuth(ctrl *gomock.Controller) *MockIAuth {
	mock := &MockIAuth{ctrl: ctrl}
	mock.recorder = &MockIAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuth) EXPECT() *MockIAuthMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockIAuth) RegisterUser(ctx context.Context, user entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIAuthMockRecorder) RegisterUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIAuth)(nil).RegisterUser), ctx, user)
}
